name: 'Preparation'

inputs:
  projects:
    description: 'Projects'
    required: true

outputs:
  affected-projects:
    description: 'List of affected projects seperated by commans'
    value: ${{ steps.affected-projects.outputs.result }}

runs:
  using: 'composite'
  steps:
    - name: Checkout PR
      uses: actions/checkout@v2

    # - name: Use Node.js 16
    #   uses: actions/setup-node@v1
    #   with:
    #     node-version: 16.x

    # - name: Cache node_modules
    #   id: cache-modules
    #   uses: actions/cache@v2
    #   with:
    #     path: node_modules
    #     key: mono-${{ hashFiles('package-lock.json') }}

    # - name: Install dependencies
    #   if: steps.cache-modules.outputs.cache-hit != 'true'
    #   shell: bash
    #   run: npm ci  --legacy-peer-deps

    - name: Nx affected projects
      id: affected
      shell: bash
      env:
        buildCommand: ${{ true && 'build' || 'build-storybook' }}
      run: |
        affectedProjects=$(echo 'proj1, proj2')
        echo "$buildCommand"

        echo "::set-output name=affected-projects::$affectedProjects"

    - name: Affected projects
      id: affected-projects
      uses: actions/github-script@v6
      env:
        PROJECTS: ${{ inputs.projects }}
        AFFECTED_PROJECTS: ${{ steps.affected.outputs.affected-projects }}
        buildCommand: ${{ 1 && 'build' || 'build-storybook' }}
      with:
        script: |
          const { PROJECTS, AFFECTED_PROJECTS, buildCommand } = process.env
          const projects = JSON.parse(PROJECTS)
          console.log("Build Command:", buildCommand)

          /* const affectedProjects = JSON.parse(AFFECTED_PROJECTS)
          let visitedNodes = {}

          const isParentChanged = (targetNode, node) => {
            if(targetNode === node) {
              return true
            }
            if(node) {
              visitedNodes[node] = true
            }

            let children = !!node ? [] : affectedProjects.projects
            if (node && node.length && affectedProjects.projectGraph.dependencies[node]) {
              children = affectedProjects.projectGraph.dependencies[node] || []
              children = children.map((project) => project.target)
            }

            for(let i = 0; i < children.length; i++) {
              if(!visitedNodes[children[i]] && isParentChanged(targetNode, children[i])) {
                return true
              }
            }
            
            return false
          }

          const getAffectedProjects = (projects) => {
            return projects.filter((project) => {
              const found = !!affectedProjects.projects.find((affectedProject) => affectedProject === project.projectName)
              return found || (project.checkParentChange && isParentChanged(project.projectName))
            })
          }

          const affected = {}
          Object.entries(projects).forEach(([key, value]) => {
              const projectsArray = getAffectedProjects(value)
              if(projectsArray.length) {
                affected[key] = projectsArray.map((project) => project.projectName)
              }
          }) */

          return JSON.stringify({})
        result-encoding: string
