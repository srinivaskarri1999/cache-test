name: 'Preparation'

inputs:
  projects:
    description: 'Projects'
    required: true

outputs:
  affected-projects:
    description: 'List of affected projects separated by commas'
    value: ${{ steps.affected-projects.outputs.result }}

runs:
  using: 'composite'
  steps:
    - name: Checkout PR
      uses: actions/checkout@v3
      with:
        fetch-depth: 0
        ref: ${{ github.event.pull_request.head.sha }}

    - name: Derive appropriate SHAs for base and head for `nx affected` commands
      uses: nrwl/nx-set-shas@v3

    - name: Nx SHAs
      shell: bash
      run: |
        echo "BASE: ${{ env.NX_BASE }}"
        echo "HEAD: ${{ env.NX_HEAD }}"
      env:
        base: ${{ env.NX_BASE }}
        head: ${{ env.NX_HEAD }}

    - name: Nx affected projects
      id: affected
      shell: bash
      env:
        buildCommand: ${{ true && 'build' || 'build-storybook' }}
      run: |
        affectedProjects=$(echo 'edgetag-website, ui-kit')

        echo "::set-output name=affected-projects::$affectedProjects"

    - name: Affected projects
      id: affected-projects
      uses: actions/github-script@v6
      env:
        PROJECTS: ${{ inputs.projects }}
        AFFECTED_PROJECTS: ${{ steps.affected.outputs.affected-projects }}
      with:
        script: |
          const { PROJECTS, AFFECTED_PROJECTS } = process.env
          const projectsJson = JSON.parse(PROJECTS)
          const affectedProjects = AFFECTED_PROJECTS.split(',').map((project) => project.trim())
          console.log("Affected String:", affectedProjects)

          const getAffectedProjects = (projects) => {
            console.log("Projects:", projects)
            return projects.filter((project) => !!affectedProjects.find((affectedProject) => affectedProject === project.projectName))
          }

          const affected = {}
          Object.entries(projectsJson).forEach(([key, value]) => {
              const projectsArray = getAffectedProjects(value)
              if(projectsArray.length) {
                affected[key] = projectsArray
              }
          })
          console.log("Affected Projects:", affected)
          return JSON.stringify(affected)
        result-encoding: string
