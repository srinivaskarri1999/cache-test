name: Build without cache

on:
  pull_request:
    branches: [main]

jobs:
  preparation:
    runs-on: ubuntu-latest
    timeout-minutes: 3

    outputs:
      affected-projects: ${{ steps.preparation.outputs.affected-projects }}

    steps:
      - name: Checkout PR
        uses: actions/checkout@v2

      - name: Preparation
        id: preparation
        uses: ./.github/actions/preparation
        with:
          projects: |
            {
              "frontendProjects": [{ "projectName": "edgetag-app-ui" },
                                    { "projectName": "edgetag-website" }, 
                                    { "projectName": "edgetag-sdk-demo" }],
              "backendProjects": [{ "projectName": "crm-app-api" }, 
                                  { "projectName": "edgetag-app-api" }],
              "dockerProjects": [{ "projectName": "cloud-app-ui" }],
              "storybookProjects": [{ "projectName": "ui-kit" }]
            }

      - name: Output projects
        shell: bash
        run: |
          echo '${{ steps.preparation.outputs.affected-projects }}'

  lint:
    runs-on: ubuntu-latest
    needs: preparation

    steps:
      - name: Dummy step
        shell: bash
        run: echo "Just dummy step"

  # proj1:
  #   runs-on: ubuntu-latest
  #   needs: [preparation, lint]
  #   if: ${{ fromJSON(needs.preparation.outputs.affected-projects).proj1 != null }}
  #   strategy:
  #     matrix:
  #       target: ${{ fromJSON(needs.preparation.outputs.affected-projects).proj1 }}

  #   steps:
  #     - name: Checkout
  #       uses: actions/checkout@v2

  #     # - name: Set up Docker Buildx
  #     #   uses: docker/setup-buildx-action@v1

  #     - name: echo state value
  #       shell: bash
  #       run: echo ${{ matrix.target }}

  # proj2:
  #   runs-on: ubuntu-latest
  #   needs: [preparation, lint]
  #   if: ${{ fromJSON(needs.preparation.outputs.affected-projects).proj2 != null }}
  #   strategy:
  #     matrix:
  #       target: ${{ fromJSON(needs.preparation.outputs.affected-projects).proj2 }}

  #   steps:
  #     - name: Checkout
  #       uses: actions/checkout@v2

  #     # - name: Set up Docker Buildx
  #     #   uses: docker/setup-buildx-action@v1

  #     - name: echo state value
  #       shell: bash
  #       run: echo ${{ matrix.target }}

  # proj3:
  #   runs-on: ubuntu-latest
  #   needs: [preparation, lint]
  #   if: ${{ fromJSON(needs.preparation.outputs.affected-projects).proj3 != null }}
  #   strategy:
  #     matrix:
  #       target: ${{ fromJSON(needs.preparation.outputs.affected-projects).proj3 }}

  #   steps:
  #     - name: Checkout
  #       uses: actions/checkout@v2

  #     # - name: Set up Docker Buildx
  #     #   uses: docker/setup-buildx-action@v1

  #     - name: echo state value
  #       shell: bash
  #       run: echo ${{ matrix.target }}
  # - name: Login to DockerHub
  #   uses: docker/login-action@v1
  #   with:
  #     username: ${{ secrets.DOCKERHUB_USERNAME }}
  #     password: ${{ secrets.DOCKERHUB_TOKEN }}

  # - name: Build and push
  #   uses: docker/build-push-action@v2
  #   with:
  #     context: .
  #     push: false
  #     tags: user/app:latest
  #     cache-from: type=local,src=/tmp/.buildx-cache
  #     cache-to: type=local,dest=/tmp/.buildx-cache-new
